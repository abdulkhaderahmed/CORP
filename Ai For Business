import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import seaborn as sns
import matplotlib.pyplot as plt

# Load the dataset
df=pd.read_csv(r'/Users/abdulkhader/Downloads/CustomerShoppingTrends.csv')
file_path = '/Users/abdulkhader/Downloads/CustomerShoppingTrends.csv'
data = pd.read_csv(file_path)

# Data Exploration
print(data.describe())
sns.pairplot(data)
plt.show()

# Data Preprocessing (e.g., handling missing values)
data = data.dropna()

# Define the Problem: Let's say we want to increase sales revenue.

# Descriptive Analytics
# print(data.groupby('Category')['Purchase Amount (USD)'].sum())

# Predictive Analytics: Predict purchase amount based on other features
features = data.drop('Purchase Amount (USD)', axis=1)
target = data['Purchase Amount (USD)']
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Fit a predictive model
model = RandomForestRegressor()
model.fit(X_train, y_train)

# Predictions
predictions = model.predict(X_test)
 # Evaluate the model
mse = mean_squared_error(y_test, predictions)
print(f'Mean Squared Error: {mse}')

# Prescriptive Analytics: Analyze feature importance to understand what influences purchase amount
feature_importances = pd.Series(model.feature_importances_, index=features.columns)
feature_importances.nlargest(10).plot(kind='barh')
plt.show()

# Implementation & Evaluation: This would be specific to the actions taken based on the analysis.
